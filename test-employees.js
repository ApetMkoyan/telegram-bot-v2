const fs = require('fs');
const path = require('path');
const config = require('./config');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  const dataFile = config.DATA_SETTINGS.dataFile;
  if (fs.existsSync(dataFile)) {
    const raw = fs.readFileSync(dataFile);
    return JSON.parse(raw);
  }
  return null;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
function testEmployees() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...\n');
  
  const data = loadData();
  if (!data) {
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    return;
  }
  
  const park = 'parkFrunze';
  const employees = data[park]?.employees || [];
  const shifts = data[park]?.shifts || {};
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∫–∞ ${config.PARKS[park]?.name || park}:`);
  console.log(`üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
  
  if (employees.length > 0) {
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:');
    employees.forEach((emp, index) => {
      console.log(`${index + 1}. ${emp}`);
    });
    
    console.log('\nüìÖ –°–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:');
    const today = new Date();
    const dayOfWeek = today.getDay() === 0 ? 6 : today.getDay() - 1;
    
    let workingToday = [];
    let dayOffToday = [];
    
    employees.forEach(name => {
      const employeeShifts = shifts[name] || Array(7).fill('');
      const todayShift = employeeShifts[dayOfWeek] || '';
      
      if (todayShift && todayShift !== '–≤—ã—Ö') {
        workingToday.push(name);
      } else {
        dayOffToday.push(name);
      }
    });
    
    console.log(`‚úÖ –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞—é—Ç (${workingToday.length}):`);
    workingToday.forEach(name => console.log(`  ‚Ä¢ ${name}`));
    
    console.log(`‚ùå –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω—ã–µ (${dayOffToday.length}):`);
    dayOffToday.forEach(name => console.log(`  ‚Ä¢ ${name}`));
    
    console.log('\nüìÖ –°–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:');
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowDayOfWeek = tomorrow.getDay() === 0 ? 6 : tomorrow.getDay() - 1;
    
    let workingTomorrow = [];
    let dayOffTomorrow = [];
    
    employees.forEach(name => {
      const employeeShifts = shifts[name] || Array(7).fill('');
      const tomorrowShift = employeeShifts[tomorrowDayOfWeek] || '';
      
      if (tomorrowShift && tomorrowShift !== '–≤—ã—Ö') {
        workingTomorrow.push(name);
      } else {
        dayOffTomorrow.push(name);
      }
    });
    
    console.log(`‚úÖ –ó–∞–≤—Ç—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç (${workingTomorrow.length}):`);
    workingTomorrow.forEach(name => console.log(`  ‚Ä¢ ${name}`));
    
    console.log(`‚ùå –ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ (${dayOffTomorrow.length}):`);
    dayOffTomorrow.forEach(name => console.log(`  ‚Ä¢ ${name}`));
    
    // –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç
    console.log('\nüí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç:');
    let totalSalary = 0;
    employees.forEach(name => {
      const employeeShifts = shifts[name] || Array(7).fill('');
      const salary = calculateSalary(name, employeeShifts);
      totalSalary += salary;
      console.log(`  ${name}: ${salary}‚ÇΩ`);
    });
    console.log(`üíµ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${totalSalary}‚ÇΩ`);
    
  } else {
    console.log('‚ùå –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!');
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã (–∫–æ–ø–∏—è –∏–∑ handlers.js)
function calculateSalary(name, row) {
  let salary = 0;
  row.forEach(shift => {
    if (shift && shift !== '–≤—ã—Ö') {
      const shiftInfo = config.SHIFTS.shiftTypes[shift];
      if (shiftInfo) {
        salary += shiftInfo.salary;
      }
    }
  });
  return salary;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testEmployees(); 