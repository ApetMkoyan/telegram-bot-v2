const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const moment = require('moment');
const config = require('./config');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!config.BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env');
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const dataDir = path.dirname(config.DATA_SETTINGS.dataFile);
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

const bot = new TelegramBot(config.BOT_TOKEN, config.BOT_SETTINGS);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let parksData = {};
const userStates = {};
const loginAttempts = {};
const activeSessions = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  try {
    console.log('üìÇ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑:', config.DATA_SETTINGS.dataFile);
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', dataDir);
    
    if (fs.existsSync(config.DATA_SETTINGS.dataFile)) {
      const raw = fs.readFileSync(config.DATA_SETTINGS.dataFile);
      parksData = JSON.parse(raw);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä–∫–æ–≤:', Object.keys(parksData).length);
      Object.keys(parksData).forEach(park => {
        console.log(`  - ${park}: ${parksData[park].employees?.length || 0} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
      });
    } else {
      console.log('üìù –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
      parksData = {
        parkFrunze: { 
          employees: [], 
          shifts: {}, 
          machines: [],
          hockeyHistory: [],
          boxerHistory: [],
          nextHockeyCollection: moment().add(config.MACHINES.hockeyCollectionInterval, 'days').format('YYYY-MM-DD'),
          nextBoxerCollection: moment().add(config.MACHINES.boxerCollectionInterval, 'days').format('YYYY-MM-DD')
        },
        parkMorVokzal: { 
          employees: [], 
          shifts: {}, 
          machines: [],
          hockeyHistory: [],
          boxerHistory: [],
          nextHockeyCollection: moment().add(config.MACHINES.hockeyCollectionInterval, 'days').format('YYYY-MM-DD'),
          nextBoxerCollection: moment().add(config.MACHINES.boxerCollectionInterval, 'days').format('YYYY-MM-DD')
        },
        parkNeptun: { 
          employees: [], 
          shifts: {}, 
          machines: [],
          hockeyHistory: [],
          boxerHistory: [],
          nextHockeyCollection: moment().add(config.MACHINES.hockeyCollectionInterval, 'days').format('YYYY-MM-DD'),
          nextBoxerCollection: moment().add(config.MACHINES.boxerCollectionInterval, 'days').format('YYYY-MM-DD')
        }
      };
      saveData();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    console.log('üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...');
    parksData = {
      parkFrunze: { employees: [], shifts: {}, machines: [] },
      parkMorVokzal: { employees: [], shifts: {}, machines: [] },
      parkNeptun: { employees: [], shifts: {}, machines: [] }
    };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤:', config.DATA_SETTINGS.dataFile);
    fs.writeFileSync(config.DATA_SETTINGS.dataFile, JSON.stringify(parksData, null, 2));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ:', dataDir);
    try {
      fs.accessSync(dataDir, fs.constants.W_OK);
      console.log('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å');
    } catch (accessError) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å:', accessError.message);
    }
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
function createBackup() {
  try {
    const timestamp = moment().format('YYYY-MM-DD_HH-mm-ss');
    const backupFile = path.join(dataDir, `backup-${timestamp}.json`);
    fs.writeFileSync(backupFile, JSON.stringify(parksData, null, 2));
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurity(chatId) {
  const now = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
  Object.keys(activeSessions).forEach(sessionId => {
    if (now - activeSessions[sessionId].timestamp > config.SECURITY.sessionTimeout * 1000) {
      delete activeSessions[sessionId];
      delete userStates[sessionId];
      console.log(`‚è∞ –°–µ—Å—Å–∏—è ${sessionId} –∏—Å—Ç–µ–∫–ª–∞`);
    }
  });
  
  const activeUsers = Object.keys(activeSessions).length;
  if (activeUsers >= config.SECURITY.allowedUsers) {
    return { allowed: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
  }
  
  return { allowed: true };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkPermission(userRole, action) {
  const permissions = {
    admin: ['read', 'write', 'delete', 'manage_users', 'manage_machines'],
    manager: ['read', 'write', 'manage_employees', 'manage_shifts'],
    supervisor: ['read', 'write'],
    viewer: ['read']
  };
  
  return permissions[userRole]?.includes(action) || false;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      ['üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'üìÖ –°–º–µ–Ω—ã'],
      ['üèí –•–æ–∫–∫–µ–π', 'ü•ä –ë–æ–∫—Å—ë—Ä'],
      ['üìä –û—Ç—á—ë—Ç—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
      ['üö™ –í—ã–π—Ç–∏']
    ],
    resize_keyboard: true
  }
};

const backKeyboard = {
  reply_markup: {
    keyboard: [['üîô –ù–∞–∑–∞–¥']],
    resize_keyboard: true
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const securityCheck = checkSecurity(chatId);
  
  if (!securityCheck.allowed) {
    bot.sendMessage(chatId, `‚ùå ${securityCheck.reason}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    return;
  }
  
  userStates[chatId] = { state: 'login', step: 'username' };
  loginAttempts[chatId] = 0;
  
  bot.sendMessage(chatId, 
    'üé¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤!\n\n' +
    '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
    backKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: ${text}`);
  
  const securityCheck = checkSecurity(chatId);
  if (!securityCheck.allowed) {
    bot.sendMessage(chatId, `‚ùå ${securityCheck.reason}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userStates[chatId]) {
    console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId}, —Å–æ–∑–¥–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
    userStates[chatId] = { state: 'login', step: 'username' };
    loginAttempts[chatId] = 0;
  }
  
  const state = userStates[chatId];
  console.log(`üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, state);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
  if (text === 'üö™ –í—ã–π—Ç–∏') {
    console.log(`üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
    delete userStates[chatId];
    delete activeSessions[chatId];
    delete loginAttempts[chatId];
    bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    console.log(`üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∑–∞–¥`);
    if (state.state === 'logged_in') {
      showMainMenu(chatId);
    } else {
      userStates[chatId] = { state: 'login', step: 'username' };
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:', backKeyboard);
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (state.state === 'login') {
    console.log(`üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${chatId}`);
    handleLogin(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (state.state === 'logged_in') {
    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è ${chatId}: ${text}`);
    handleMainMenu(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ${chatId}: ${state.currentSection}`);
  handleStates(chatId, text, state);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function handleLogin(chatId, text, state) {
  if (state.step === 'username') {
    if (config.USERS[text]) {
      state.username = text;
      state.step = 'password';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    } else {
      loginAttempts[chatId] = (loginAttempts[chatId] || 0) + 1;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        return;
      }
      bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${config.SECURITY.maxLoginAttempts - loginAttempts[chatId]}`);
    }
  } else if (state.step === 'password') {
    if (config.USERS[state.username] && config.USERS[state.username].password === text) {
      state.state = 'logged_in';
      state.park = config.USERS[state.username].park;
      state.role = config.USERS[state.username].role;
      state.userName = config.USERS[state.username].name;
      delete state.step;
      delete state.username;
      delete loginAttempts[chatId];
      
      activeSessions[chatId] = {
        user: state.userName,
        park: state.park,
        role: state.role,
        timestamp: Date.now()
      };
      
      const parkName = config.PARKS[state.park]?.name || state.park;
      bot.sendMessage(chatId, 
        `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\nüè¢ –ü–∞—Ä–∫: ${parkName}\nüë§ –†–æ–ª—å: ${state.role}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${state.userName}`,
        mainKeyboard
      );
      showMainMenu(chatId);
    } else {
      loginAttempts[chatId] = (loginAttempts[chatId] || 0) + 1;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        return;
      }
      bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${config.SECURITY.maxLoginAttempts - loginAttempts[chatId]}`);
    }
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const state = userStates[chatId];
  const park = state.park;
  const parkName = config.PARKS[park]?.name || park;
  
  bot.sendMessage(chatId, 
    `üè¢ –ü–∞—Ä–∫: ${parkName}\nüë§ –†–æ–ª—å: ${state.role}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${state.userName}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    mainKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function handleMainMenu(chatId, text, state) {
  switch (text) {
    case 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
      if (checkPermission(state.role, 'read')) {
        showEmployeesMenu(chatId, state, bot);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      }
      break;
    case 'üìÖ –°–º–µ–Ω—ã':
      if (checkPermission(state.role, 'read')) {
        showShiftsMenu(chatId, state, bot);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω.');
      }
      break;
    case 'üèí –•–æ–∫–∫–µ–π':
      if (checkPermission(state.role, 'read')) {
        showHockeyMenu(chatId, state, bot);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö–æ–∫–∫–µ—è.');
      }
      break;
    case 'ü•ä –ë–æ–∫—Å—ë—Ä':
      if (checkPermission(state.role, 'read')) {
        showBoxerMenu(chatId, state, bot);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–∫—Å—ë—Ä–∞.');
      }
      break;
    case 'üìä –û—Ç—á—ë—Ç—ã':
      if (checkPermission(state.role, 'read')) {
        showReports(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤.');
      }
      break;
    case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
      showSettings(chatId, state);
      break;
  }
}

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const handlers = require('./handlers');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ handlers)
const showEmployeesMenu = handlers.showEmployeesMenu;
const showShiftsMenu = handlers.showShiftsMenu;
const showHockeyMenu = handlers.showHockeyMenu;
const showBoxerMenu = handlers.showBoxerMenu;

// –û—Ç—á—ë—Ç—ã
function showReports(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  const hockeyHistory = parksData[park]?.hockeyHistory || [];
  const boxerHistory = parksData[park]?.boxerHistory || [];
  const parkName = config.PARKS[park]?.name || park;
  
  // –†–∞—Å—á—ë—Ç –æ–±—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
  let totalSalary = 0;
  employees.forEach(name => {
    const row = shifts[name] || Array(7).fill('');
    totalSalary += handlers.calculateSalary(name, row);
  });
  
  // –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–≤
  const hockeyIncome = hockeyHistory.reduce((sum, entry) => sum + entry.amount, 0);
  const boxerIncome = boxerHistory.reduce((sum, entry) => sum + entry.amount, 0);
  
  const message = `üìä –û—Ç—á—ë—Ç –ø–æ –ø–∞—Ä–∫—É ${parkName}:\n\n` +
    `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}\n` +
    `üí∞ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${totalSalary}‚ÇΩ\n` +
    `üèí –î–æ—Ö–æ–¥ —Å —Ö–æ–∫–∫–µ—è: ${hockeyIncome}‚ÇΩ\n` +
    `ü•ä –î–æ—Ö–æ–¥ —Å –±–æ–∫—Å—ë—Ä–∞: ${boxerIncome}‚ÇΩ\n` +
    `üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${hockeyIncome + boxerIncome}‚ÇΩ\n` +
    `üíµ –ü—Ä–∏–±—ã–ª—å: ${hockeyIncome + boxerIncome - totalSalary}‚ÇΩ`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings(chatId, state) {
  const park = state.park;
  const parkName = config.PARKS[park]?.name || park;
  
  const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
    `üè¢ –ü–∞—Ä–∫: ${parkName}\n` +
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${state.userName}\n` +
    `üîê –†–æ–ª—å: ${state.role}\n` +
    `‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${Object.keys(activeSessions).length}/${config.SECURITY.allowedUsers}\n` +
    `üîÑ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤: ${config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000)}—á\n` +
    `üîí –ü–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: ${config.SECURITY.maxLoginAttempts}\n` +
    `‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: ${config.SECURITY.sessionTimeout / 60}–º–∏–Ω`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleStates(chatId, text, state) {
  if (!state.currentSection) {
    console.log(`‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏ –¥–ª—è ${chatId}`);
    return;
  }
  
  console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${state.currentSection} –¥–ª—è ${chatId}`);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  handlers.setParksData(parksData);
  handlers.setSaveDataFunction(saveData);
  
  switch (state.currentSection) {
    case 'employees':
      console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è ${chatId}`);
      handlers.handleEmployeesStates(chatId, text, state, bot);
      break;
    case 'shifts':
      console.log(`üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω –¥–ª—è ${chatId}`);
      handlers.handleShiftsStates(chatId, text, state, bot);
      break;
    case 'hockey':
      console.log(`üèí –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–∫–∫–µ—è –¥–ª—è ${chatId}`);
      handlers.handleHockeyStates(chatId, text, state, bot);
      break;
    case 'boxer':
      console.log(`ü•ä –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–∫—Å—ë—Ä–∞ –¥–ª—è ${chatId}`);
      handlers.handleBoxerStates(chatId, text, state, bot);
      break;
    case 'tomorrow_shift':
      console.log(`üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è ${chatId}`);
      handleTomorrowShiftStates(chatId, text, state);
      break;
    default:
      console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è: ${state.currentSection}`);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      showMainMenu(chatId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
function handleTomorrowShiftStates(chatId, text, state) {
  if (text === '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞') {
    if (!handlers.checkPermission(state.role, 'manage_shifts')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ–Ω.');
      return;
    }
    const employees = parksData[state.park]?.employees || [];
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ–Ω');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n';
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
    
    state.subState = 'selecting_employee_for_tomorrow';
    bot.sendMessage(chatId, message);
  } else if (text === 'üìã –ö—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞–≤—Ç—Ä–∞') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const tomorrow = moment().add(1, 'day');
    const dayOfWeek = tomorrow.day() === 0 ? 6 : tomorrow.day() - 1;
    
    let workingEmployees = [];
    let dayOffEmployees = [];
    
    employees.forEach(name => {
      const shifts = parksData[park]?.shifts?.[name] || Array(7).fill('');
      const tomorrowShift = shifts[dayOfWeek] || '';
      
      if (tomorrowShift && tomorrowShift !== '–≤—ã—Ö') {
        workingEmployees.push(name);
      } else {
        dayOffEmployees.push(name);
      }
    });
    
    let message = `üìÖ –ö—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞–≤—Ç—Ä–∞ (${tomorrow.format('DD.MM.YYYY')}):\n\n`;
    
    if (workingEmployees.length > 0) {
      message += '‚úÖ –†–∞–±–æ—Ç–∞—é—Ç:\n';
      workingEmployees.forEach(name => {
        message += `‚Ä¢ ${name}\n`;
      });
      message += '\n';
    }
    
    if (dayOffEmployees.length > 0) {
      message += '‚ùå –í—ã—Ö–æ–¥–Ω—ã–µ:\n';
      dayOffEmployees.forEach(name => {
        message += `‚Ä¢ ${name}\n`;
      });
    }
    
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'selecting_employee_for_tomorrow') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employeeName = employees[index];
      state.selectedEmployee = employeeName;
      state.subState = 'editing_tomorrow_shift';
      
      const tomorrow = moment().add(1, 'day');
      const dayOfWeek = tomorrow.day() === 0 ? 6 : tomorrow.day() - 1;
      const shifts = parksData[park]?.shifts?.[employeeName] || Array(7).fill('');
      const currentShift = shifts[dayOfWeek] || '';
      
      let message = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è ${employeeName}:\n\n`;
      message += `–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞: ${currentShift || '–í—ã—Ö–æ–¥–Ω–æ–π'}\n\n`;
      message += '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–º–µ–Ω:\n';
      Object.keys(config.SHIFTS.shiftTypes).forEach(type => {
        const shiftInfo = config.SHIFTS.shiftTypes[type];
        message += `‚Ä¢ ${type} - ${shiftInfo.name} (${shiftInfo.salary}‚ÇΩ)\n`;
      });
      message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã:';
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
      delete state.subState;
      handlers.showTomorrowShiftMenu(chatId, state, bot);
    }
  } else if (state.subState === 'editing_tomorrow_shift') {
    const park = state.park;
    const employeeName = state.selectedEmployee;
    const tomorrow = moment().add(1, 'day');
    const dayOfWeek = tomorrow.day() === 0 ? 6 : tomorrow.day() - 1;
    
    if (text === '–≤—ã—Ö' || config.SHIFTS.shiftTypes[text]) {
      if (!parksData[park].shifts[employeeName]) {
        parksData[park].shifts[employeeName] = Array(7).fill('');
      }
      
      parksData[park].shifts[employeeName][dayOfWeek] = text;
      saveData();
      
      const shiftName = text === '–≤—ã—Ö' ? '–í—ã—Ö–æ–¥–Ω–æ–π' : config.SHIFTS.shiftTypes[text].name;
      bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è ${employeeName} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${shiftName}`);
      
      delete state.subState;
      delete state.selectedEmployee;
      handlers.showTomorrowShiftMenu(chatId, state, bot);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤.');
    }
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
function logStatus() {
  const activeUsers = Object.keys(activeSessions).length;
  const totalEmployees = Object.values(parksData).reduce((sum, park) => sum + park.employees.length, 0);
  const totalHockeyCollections = Object.values(parksData).reduce((sum, park) => sum + (park.hockeyHistory?.length || 0), 0);
  const totalBoxerCollections = Object.values(parksData).reduce((sum, park) => sum + (park.boxerHistory?.length || 0), 0);
  
  console.log(`üü¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:`);
  console.log(`   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}/${config.SECURITY.allowedUsers}`);
  console.log(`   üè¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees}`);
  console.log(`   üèí –°–±–æ—Ä–æ–≤ —Ö–æ–∫–∫–µ—è: ${totalHockeyCollections}`);
  console.log(`   ü•ä –°–±–æ—Ä–æ–≤ –±–æ–∫—Å—ë—Ä–∞: ${totalBoxerCollections}`);
  console.log(`   ‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadData();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
setInterval(createBackup, config.DATA_SETTINGS.backupInterval);
setInterval(logStatus, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.log('‚ùå Polling error:', error.message);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 - –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 409) {
    console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞');
    console.log('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ polling...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling
    bot.stopPolling();
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...');
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...');
      bot.startPolling();
    }, 5000);
  }
});

bot.on('error', (error) => {
  console.log('‚ùå Bot error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

console.log('üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('üîê –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞');
console.log('üë• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', config.SECURITY.allowedUsers);
console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏:', config.SECURITY.sessionTimeout / 60, '–º–∏–Ω—É—Ç');
console.log('üíæ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤ –∫–∞–∂–¥—ã–µ:', config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000), '—á–∞—Å–æ–≤');
console.log('üèí –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ —Ö–æ–∫–∫–µ—è:', config.MACHINES.hockeyCollectionInterval, '–¥–Ω–µ–π');
console.log('ü•ä –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –±–æ–∫—Å—ë—Ä–∞:', config.MACHINES.boxerCollectionInterval, '–¥–Ω–µ–π');
console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...');
  bot.startPolling();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = bot; 